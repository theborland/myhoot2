###
Cakefile for automated build and testing

Usage:

	cake test 	# Run tests
	cake docs	# Generate developer's documentation from source
	cake dist	# Generate ready-to-deploy release distribution
###

# Requirements
fs = require 'fs'
{spawn} = require 'child_process'

try
  which = require('which').sync
catch err
	if process.platform.match(/^win/)?
		console.error "WARNING: the which module is required for Windows\nTry: npm install which"
	which = null

# Tasks
task 'test', "run tests", -> mocha()
task 'docs', "generate developer's documentation from source", -> docco()
task 'dist', "generate ready-to-deploy release distribution", -> build()

# Regular expressions
coffeeScriptFile = /\.(lit)?coffee$/
markdownFile = /\.m(ark)?d(own)?$/

fileExtension = /\.[^\.]+$/

ignoredDirectories = /node_modules|test/
ignoredFiles = /^\./

# Task functions
mocha = ->
	options = [
		'--compilers', 'coffee:coffee-script,litcoffee:coffee-script',
		'-R', 'nyan',
		'--recursive',
		"#{__dirname}/src/test"
	]
	launch 'mocha', options
docco = ->
	walk "#{__dirname}/src", (dir = '', file) ->
		outdir = dir.replace /src/, 'docs'
		if file.match coffeeScriptFile
			mkdir outdir
			options = [ 
				'-o', outdir,
				"#{dir}/#{file}"
			]
			launch 'docco', options
build = ->
	walk "#{__dirname}/src", (dir = '', file) ->
		outdir = dir.replace /src/, 'dist'
		mkdir outdir
		fileWithoutExtension = file.replace fileExtension, ''
		if file.match coffeeScriptFile
			options = [
				'-b', '-c', '-p',
				"#{dir}/#{file}"
			]
			launch 'coffee', options, fs.createWriteStream "#{outdir}/#{fileWithoutExtension}.js"
		else if file.match markdownFile
			options = [ "#{dir}/#{file}" ]
			launch 'md2html', options, fs.createWriteStream "#{outdir}/#{fileWithoutExtension}.html"
		else
			fs.createReadStream("#{dir}/#{file}").pipe fs.createWriteStream "#{outdir}/#{file}"

# Internal functions
launch = (cmd, options, stdout) ->
	cmd = which(cmd) if which?
	if stdout?
		ioOptions = 
			stdio: [ 0, 'pipe', 2 ]
	else
		ioOptions =
			stdio: [ 0, 1, 2 ]
	app = spawn cmd, options, ioOptions
	app.stdout.pipe stdout if stdout?
walk = (dir, cb) ->
	fs.readdir dir, (err, files) ->
		throw err if err
		for file in files
			try
			  stat = fs.statSync "#{dir}/#{file}"
			catch err
				stat = null
			if stat?.isDirectory()
				walk "#{dir}/#{file}", cb unless file.match ignoredDirectories
			else
				cb dir, file unless file.match ignoredFiles
mkdir = (dir) ->
	subdirs = dir.split '/'
	path = ''
	for subdir in subdirs
		path += "#{subdir}/"
		fs.mkdirSync path unless fs.existsSync path