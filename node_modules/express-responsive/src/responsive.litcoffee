Require modules. We need `fs` to check for existing template files, `express` to extend it with our `enableDeviceRouting` function, and our `Parser` class.

	fs = require 'fs'
	express = require 'express'
	module.exports.namespace = 'express'
	Parser = require './Parser'

A middleware determines the device type and attaches the retrived information to the request data at `req.device`.

	module.exports.deviceCapture = ->
		return (req, res, next) ->
			parser = new Parser(req)
			req.device = parser.getDevice()
			next?()

The `enableDeviceRouting` function is injected into the Express framework.

	express.application.enableDeviceRouting = ->

Get instance of the application and retrieve information about the template engine used.

		app = this.app or this
		root = app.get 'views'
		ext = app.get 'view engine'

Inject middleware to hijack the `res.render` function.

		app.use (req, res, next) ->
			_render = res.render.bind res

We replace `res.render` with our own function that looks for device dependent templates and redirects to that template if available. Whether the template name was modified by us or not, the old `res.render` is called - making this basically a form of middleware in between `res.render`.

			res.render = (name, options, fn) ->
				unless req.device?
					parser = new Parser(req)
					req.device = parser.getDevice()
				deviceTemplate = "#{req.device}/#{name}"
				fs.exists "#{root}/#{deviceTemplate}.#{ext}", (exists) ->
					if exists
						_render deviceTemplate, options, fn
					else
						_render name, options, fn
			next?()
